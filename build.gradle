buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.31.0"
        classpath "org.grails.plugins:views-gradle:2.3.2"
    }
}

version = "${productVersion}${(isRelease.toBoolean()) ? '' : '-SNAPSHOT'}"
group 'com.exa.exacloud'

apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.grails.grails-plugin'
apply plugin: 'maven-publish'
apply plugin: 'org.grails.plugins.views-json'
apply plugin: 'com.jfrog.artifactory'

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly "io.micronaut:micronaut-inject-groovy"
    console "org.grails:grails-console"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.grails:grails-web-boot"
    implementation "org.grails.plugins:views-json"
    implementation "org.grails.plugins:views-json-templates"
    profile "org.grails.profiles:web-plugin"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.mockito:mockito-core"
    testImplementation "org.grails:grails-web-testing-support"
}

if (!ext.has('ignoreTestFailures')) {
    ext.ignoreTestFailures = false
}

test {
    ignoreFailures = project.ext.ignoreTestFailures.toBoolean()
}

tasks.named('wrapper') {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = gradleWrapperVersion
}


bootRun {
    ignoreExitValue true
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(GroovyCompile) {
    configure(groovyOptions) {
        forkOptions.jvmArgs = ['-Xmx1024m']
    }
}

tasks.withType(Test) {
    useJUnitPlatform()
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

tasks.named("bootJar") {
    archiveClassifier = 'boot'
}

tasks.named("jar") {
    archiveClassifier = ''
}

tasks.named("bootJarMainClassName") {
    dependsOn compileGsonViews
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
        }
    }
}

artifactory {
    contextUrl = "${artifactoryUrl}"

    publish {
        defaults {
            publications('mavenJava')
            publishArtifacts = true
            publishPom = true

        }
        repository {
            repoKey = "${isRelease.toBoolean() ? 'plugins-release-local' : 'plugins-snapshot-local'}"
            username = usernameText
            password = passwordText
        }
    }
}